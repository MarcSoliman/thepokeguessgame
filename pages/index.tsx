import type { NextPage } from "next";

import Head from "next/head";
import Image from "next/image";
import PokeGuessApp from "../components/PokeGuessApp";
import TitleBar from "../components/TitleBar";

import axios from "axios";
import { useEffect, useState } from "react";
import styled from "styled-components";

export const StyledBackgroundContainer = styled.div`
  background-image: url("Background.png");
  height: 100vh;
`;

const Home: NextPage = () => {
  const [pokemonRData, setPokemonRData]: any = useState("");
  const [pokemonLData, setPokemonLData]: any = useState("");
  const [pokemonQuestion, setPokemonQuestion]: any = useState("");
  const [selectedPokemon, setSelectedPokemon]: any = useState("");

  const randomPokemon: (inUseID?: number) => number = (inUseID) => {
    const pokemonID = Math.floor(Math.random() * 800 + 1);

    if (pokemonID !== inUseID) return pokemonID;
    return randomPokemon(inUseID);
  };

  const generatePokemon = () => {
    const pokemonRight = randomPokemon();
    const pokemonLeft = randomPokemon(pokemonRight);

    return [pokemonRight, pokemonLeft];
  };

  const [pokemonRight, pokemonLeft] = generatePokemon();

  const chosenQuestion = (pokemonR: any, pokemonL: any) => {
    let chosenPokemon = [pokemonR, pokemonL][Math.floor(Math.random() * 2)];
    setSelectedPokemon(chosenPokemon);
    const typeOfQuestion = Math.random() * 1;

    if (typeOfQuestion > 0.7) {
      if (pokemonR?.legendaryStatus !== pokemonL?.legendaryStatus) {
        if (pokemonR?.legendaryStatus === true) {
          chosenPokemon = pokemonR;
          setSelectedPokemon(chosenPokemon);
        } else {
          chosenPokemon = pokemonL;
          setSelectedPokemon(chosenPokemon);
        }
        setPokemonQuestion("is a Legendary pokemon?");
      } else if (pokemonR?.abilities !== pokemonL?.abilities) {
        setPokemonQuestion(
          "has the ability '" + chosenPokemon?.abilities + "' ?"
        );
      } else if (pokemonR?.name !== pokemonL?.name) {
        setPokemonQuestion("has the name '" + chosenPokemon?.name + "' ?");
      }
    } else if (typeOfQuestion > 0.5 && typeOfQuestion < 0.7) {
      if (pokemonR?.weight !== pokemonL?.weight) {
        if (pokemonR?.weight > pokemonL?.weight) {
          chosenPokemon = pokemonR;
          setSelectedPokemon(chosenPokemon);
        } else {
          chosenPokemon = pokemonL;
          setSelectedPokemon(chosenPokemon);
        }
        setPokemonQuestion("is heavier ?");
      }
    } else if (typeOfQuestion > 0.25 && typeOfQuestion < 0.5) {
      if (pokemonR?.height !== pokemonL?.height) {
        if (pokemonR?.height > pokemonL?.height) {
          chosenPokemon = pokemonR;
          setSelectedPokemon(chosenPokemon);
        } else {
          chosenPokemon = pokemonL;
          setSelectedPokemon(chosenPokemon);
        }
        setPokemonQuestion("is taller ?");
      }
    } else if (typeOfQuestion >= 0 && typeOfQuestion < 0.25) {
      if (pokemonR?.name !== pokemonL?.name) {
        setPokemonQuestion("has the name '" + chosenPokemon?.name + "' ?");
      }
    }
  };
  const pokeDataFetch = () => {
    const pokeRightRequest = axios.get(
      "/api/pokeapi/" + JSON.stringify(pokemonRight)
    );
    const pokeLeftRequest = axios.get(
      "/api/pokeapi/" + JSON.stringify(pokemonLeft)
    );
    axios.all([pokeRightRequest, pokeLeftRequest]).then(
      axios.spread((...responses) => {
        const pokeRightResponse = responses[0];
        const pokeLeftResponse = responses[1];

        setPokemonRData(pokeRightResponse.data);
        setPokemonLData(pokeLeftResponse.data);
        chosenQuestion(pokeRightResponse.data, pokeLeftResponse.data);
      })
    );
  };

  useEffect(() => {
    pokeDataFetch();
  }, []);

  const winLoseCallback: any = (state: string) => {
    if (state === "win") {
      pokeDataFetch();
    } else {
      console.log("YOU LOSE");
    }
  };
  return (
    <StyledBackgroundContainer>
      <Head>
        <title>The PokeGuess Game</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <TitleBar />
      <PokeGuessApp
        pokemonRImage={pokemonRData.sprite}
        pokemonLImage={pokemonLData.sprite}
        pokemonRName={pokemonRData.name}
        pokemonLName={pokemonLData.name}
        GeneratedQuestion={pokemonQuestion}
        selectedPokemon={selectedPokemon}
        winLose={winLoseCallback}
      />
    </StyledBackgroundContainer>
  );
};

export default Home;
